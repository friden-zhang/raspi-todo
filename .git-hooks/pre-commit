#!/bin/bash

# Pre-commit script for auto-formatting and validation
# This script will be installed as a git pre-commit hook

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to run command and check exit code
run_check() {
    local name="$1"
    local cmd="$2"
    echo -e "${BLUE}üìã $name${NC}"

    if eval "$cmd"; then
        echo -e "${GREEN}‚úÖ $name passed${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $name failed${NC}"
        return 1
    fi
}

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
RUST_FILES=$(echo "$STAGED_FILES" | grep '\.rs$' || true)
TS_FILES=$(echo "$STAGED_FILES" | grep '\.(ts|tsx|js|jsx)$' || true)
JSON_FILES=$(echo "$STAGED_FILES" | grep '\.json$' || true)
YAML_FILES=$(echo "$STAGED_FILES" | grep '\.(yml|yaml)$' || true)
MD_FILES=$(echo "$STAGED_FILES" | grep '\.md$' || true)
SH_FILES=$(echo "$STAGED_FILES" | grep '\.sh$' || true)

# Exit early if no relevant files
if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No staged files to check${NC}"
    exit 0
fi

FAILED=0

# Format and check Rust files
if [ -n "$RUST_FILES" ] && [ -d "server-rs" ]; then
    echo -e "${BLUE}ü¶Ä Checking Rust files...${NC}"

    if command_exists cargo; then
        # Format Rust code
        if ! run_check "Rust formatting" "cd server-rs && cargo fmt --check"; then
            echo -e "${YELLOW}üîß Auto-formatting Rust code...${NC}"
            cd server-rs && cargo fmt
            cd ..
            # Stage the formatted files
            echo "$RUST_FILES" | xargs git add
            echo -e "${GREEN}‚úÖ Rust code auto-formatted and staged${NC}"
        fi

        # Check Rust code
        run_check "Rust check" "cd server-rs && cargo check --quiet" || FAILED=1

        # Clippy linting (optional, less strict)
        if ! run_check "Rust clippy" "cd server-rs && cargo clippy --quiet -- -D warnings 2>/dev/null"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Clippy warnings found (not blocking commit)${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Cargo not found, skipping Rust checks${NC}"
    fi
fi

# Format and check TypeScript/JavaScript files
if [ -n "$TS_FILES" ] && [ -d "web" ]; then
    echo -e "${BLUE}üåê Checking TypeScript/JavaScript files...${NC}"

    if command_exists npm && [ -f "web/package.json" ]; then
        cd web

        # Check formatting
        if ! run_check "TypeScript/JavaScript formatting" "npm run format:check"; then
            echo -e "${YELLOW}üîß Auto-formatting TypeScript/JavaScript code...${NC}"
            npm run format
            cd ..
            # Stage the formatted files
            echo "$TS_FILES" | xargs git add
            echo -e "${GREEN}‚úÖ TypeScript/JavaScript code auto-formatted and staged${NC}"
        else
            cd ..
        fi

        # Type check
        run_check "TypeScript type check" "cd web && npm run type-check" || FAILED=1
    else
        echo -e "${YELLOW}‚ö†Ô∏è  npm or package.json not found, skipping TypeScript checks${NC}"
    fi
fi

# Format JSON files
if [ -n "$JSON_FILES" ]; then
    echo -e "${BLUE}üìÑ Checking JSON files...${NC}"

    if command_exists npx; then
        # Format JSON files
        echo -e "${YELLOW}üîß Auto-formatting JSON files...${NC}"
        echo "$JSON_FILES" | xargs npx prettier --write
        echo "$JSON_FILES" | xargs git add
        echo -e "${GREEN}‚úÖ JSON files auto-formatted and staged${NC}"

        # Validate JSON syntax
        for file in $JSON_FILES; do
            if ! python3 -m json.tool "$file" >/dev/null 2>&1; then
                echo -e "${RED}‚ùå Invalid JSON syntax in $file${NC}"
                FAILED=1
            fi
        done
    fi
fi

# Format YAML files
if [ -n "$YAML_FILES" ]; then
    echo -e "${BLUE}üìÑ Checking YAML files...${NC}"

    if command_exists npx; then
        # Format YAML files
        echo -e "${YELLOW}üîß Auto-formatting YAML files...${NC}"
        echo "$YAML_FILES" | xargs npx prettier --write
        echo "$YAML_FILES" | xargs git add
        echo -e "${GREEN}‚úÖ YAML files auto-formatted and staged${NC}"
    fi

    # Validate YAML syntax
    if command_exists python3; then
        for file in $YAML_FILES; do
            if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" >/dev/null 2>&1; then
                echo -e "${RED}‚ùå Invalid YAML syntax in $file${NC}"
                FAILED=1
            fi
        done
    fi
fi

# Format Markdown files
if [ -n "$MD_FILES" ]; then
    echo -e "${BLUE}üìù Checking Markdown files...${NC}"

    if command_exists npx; then
        echo -e "${YELLOW}üîß Auto-formatting Markdown files...${NC}"
        echo "$MD_FILES" | xargs npx prettier --write
        echo "$MD_FILES" | xargs git add
        echo -e "${GREEN}‚úÖ Markdown files auto-formatted and staged${NC}"
    fi
fi

# Check shell scripts
if [ -n "$SH_FILES" ]; then
    echo -e "${BLUE}üêö Checking shell scripts...${NC}"

    # Format shell scripts if shfmt is available
    if command_exists shfmt; then
        echo -e "${YELLOW}üîß Auto-formatting shell scripts...${NC}"
        echo "$SH_FILES" | xargs shfmt -i 2 -w
        echo "$SH_FILES" | xargs git add
        echo -e "${GREEN}‚úÖ Shell scripts auto-formatted and staged${NC}"
    fi

    # Check shell script syntax
    for file in $SH_FILES; do
        if [ -f "$file" ]; then
            if ! bash -n "$file"; then
                echo -e "${RED}‚ùå Syntax error in shell script $file${NC}"
                FAILED=1
            fi
        fi
    done
fi

# Summary
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}üí• Some checks failed. Please fix the issues and try again.${NC}"
    exit 1
fi
